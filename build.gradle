plugins {
	id "java"
	id "application"
	id "maven-publish"
	id "checkstyle"
	id "com.gradleup.shadow"
	id "com.diffplug.spotless"
}

checkstyle {
	configFile = rootProject.file("checkstyle.xml")
	toolVersion = project.checkstyle_tool_version
}

spotless {
	lineEndings = com.diffplug.spotless.LineEnding.UNIX

	java {
		removeUnusedImports()
		importOrder("java", "javax", "", "softwareschreiber")
		indentWithTabs()
		trimTrailingWhitespace()
	}
}

group "softwareschreiber"
version = rootProject.version

tasks.withType(JavaCompile).configureEach {
	it.options.encoding = "UTF-8"
	it.options.release = 21
}

java {
	withSourcesJar()
	withJavadocJar()

	sourceCompatibility = JavaVersion.VERSION_21
	targetCompatibility = JavaVersion.VERSION_21

	if (!JavaVersion.current().isCompatibleWith(JavaVersion.VERSION_21)) {
		toolchain {
			languageVersion = JavaLanguageVersion.of(21)
		}
	}
}

repositories {
	mavenCentral()
}

dependencies {
	compileOnly "org.jetbrains:annotations:${project.jetbrains_annotations_version}"
	implementation "org.slf4j:slf4j-api:${slf4j_version}"
	runtimeOnly "org.tinylog:slf4j-tinylog:${tinylog_version}"
	runtimeOnly "org.tinylog:tinylog-impl:${tinylog_version}"
	implementation "org.javacord:javacord:${javacord_version}"
	
	testImplementation "org.junit.jupiter:junit-jupiter:${junit_jupiter_version}"
	testRuntimeOnly "org.junit.platform:junit-platform-launcher"
	testCompileOnly "org.jetbrains:annotations:${jetbrains_annotations_version}"
}

application {
	mainClass = "softwareschreiber.musicbot.Main"
}

jar {
	processResources.exclude('tinylog-dev.properties')
}

test {
	useJUnitPlatform()
}

javadoc {
	failOnError = false
	options.addBooleanOption('html5', true)

	// disable 'missing' warnings
	options.addStringOption('Xdoclint:all,-missing', '-quiet')
}

assemble.dependsOn javadocJar

publishing {
	publications {
		"$project.name"(MavenPublication) {
			from components.java
		}
	}
}

